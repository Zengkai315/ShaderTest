//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "SYBO/SUB2_Character" {
Properties {
_EmissionColor ("Emission Color", Color) = (1,1,1,1)
_AlphaCutoff ("Alpha Cutoff ", Range(0, 1)) = 0.5
[ASEBegin] _Desaturate ("Desaturate", Float) = 0
_Value ("Value", Float) = 0
_BaseColor ("BaseColor", 2D) = "white" { }
_ShadingWrap ("ShadingWrap", Float) = 0
_MetalHighlightColor ("Metal Highlight Color", Color) = (0,0,0,0)
_Metalness ("Metalness", Range(0, 1)) = 0
_ReflectionRoughness ("Reflection Roughness", Range(0, 4)) = 0
_ShadingWrap_End ("ShadingWrap_End", Float) = 0
_ShadingWrap2 ("ShadingWrap2", Float) = 0
_ShadingScale ("ShadingScale", Float) = 0
_ShadingScale2 ("ShadingScale2", Float) = 0
_ShadingScale_End ("ShadingScale_End", Float) = 0
_HairReduce ("HairReduce", Float) = 0
_MaskGradientScale ("MaskGradientScale", Float) = 0
_MaskGradientAdd ("MaskGradientAdd", Float) = 0
[Toggle] _SSS_Boost ("SSS_Boost", Float) = 1
_SSS_Color ("SSS_Color", Color) = (0,0,0,0)
_HighlightIntensity ("Highlight Intensity", Float) = 0
_HighlightSize ("Highlight Size", Float) = 0
_EndRunBoost ("End-Run-Boost", Float) = 0
_RimIntensity ("RimIntensity", Range(0, 1)) = 0
_RimRotation ("RimRotation", Vector) = (0,0,0,0)
_RimRotation_EndRun ("RimRotation_EndRun", Vector) = (0,0,0,0)
_BounceRotation ("BounceRotation", Vector) = (0,0,0,0)
_BounceWrapEnd ("BounceWrapEnd", Float) = 0
_BounceWrap ("BounceWrap", Float) = 0
_BounceScale ("BounceScale", Float) = 0
_BounceScale_End ("BounceScale_End", Float) = 0
_UseMenuShadow ("UseMenuShadow", Range(0, 1)) = 0
[Toggle] _UseVertexColor ("UseVertexColor", Float) = 0
[Toggle] _UseDarken ("UseDarken", Float) = 0
[ASEEnd] [Toggle] _BendEnabled ("BendEnabled", Float) = 1
}
SubShader {
 Tags { "QUEUE" = "Geometry" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" }
 Pass {
  Name "Forward"
  Tags { "LIGHTMODE" = "UniversalForward" "QUEUE" = "Geometry" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" }
  GpuProgramID 20324
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _BendIntensity;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    
    u_xlat0.xy = in_POSITION0.yy * hlslcc_mtx4x4unity_ObjectToWorld[1].yz;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yz * in_POSITION0.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yz * in_POSITION0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yz * in_POSITION0.ww + u_xlat0.xy;
    u_xlat2.x = u_xlat0.y + (-_WorldSpaceCameraPos.z);
    u_xlat2.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xy = u_xlat2.xx * vec2(-0.00109999999, -0.000950000016);
    u_xlat0.x = u_xlat0.x * 3.39999997e-06 + u_xlat2.x;
    u_xlat2.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_BendIntensity);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled);
#endif
    u_xlat0.xyz = bool(u_xlatb6) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = in_TEXCOORD0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float MenuLight;
uniform 	vec4 BounceLightColor;
uniform 	vec4 CharShadowColor;
uniform 	float Darken;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseColor;
UNITY_LOCATION(1) uniform mediump samplerCube _CustomReflection;
in highp vec3 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
float u_xlat24;
void main()
{
    u_xlat0.x = dot(_MainLightPosition.xyz, _MainLightPosition.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_1.xyz = (-_MainLightPosition.xyz) * u_xlat0.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat2 = _BounceRotation.xzyy * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat3.xy = u_xlat2.xx * _BounceRotation.yz + (-u_xlat2.yz);
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xy = u_xlat2.xx * _BounceRotation.zy + u_xlat2.zy;
    u_xlat4.w = u_xlat5.x;
    u_xlat4.xy = u_xlat2.xw * _BounceRotation.xy + vec2(0.540302277, 0.540302277);
    u_xlat2.x = dot(u_xlat4.xzw, u_xlat16_1.xyz);
    u_xlat5.w = u_xlat4.y;
    u_xlat7.x = _BounceRotation.x * 0.841470957;
    u_xlat5.z = u_xlat2.w * _BounceRotation.z + (-u_xlat7.x);
    u_xlat3.z = u_xlat2.w * _BounceRotation.z + u_xlat7.x;
    u_xlat2.y = dot(u_xlat5.ywz, u_xlat16_1.xyz);
    u_xlat7.x = _BounceRotation.z * _BounceRotation.z;
    u_xlat3.w = u_xlat7.x * 0.459697723 + 0.540302277;
    u_xlat2.z = dot(u_xlat3.yzw, u_xlat16_1.xyz);
    u_xlat7.x = dot(u_xlat2.xyz, vs_TEXCOORD3.xyz);
    u_xlat14 = u_xlat7.x * _BounceScale_End + _BounceWrapEnd;
    u_xlat7.x = u_xlat7.x * _BounceScale + _BounceWrap;
    u_xlat14 = (-u_xlat7.x) + u_xlat14;
    u_xlat7.x = MenuLight * u_xlat14 + u_xlat7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat7.xxx * BounceLightColor.xyz;
    u_xlat2.x = vs_TEXCOORD0.y * -0.389999986 + 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.x = vs_TEXCOORD0.z * 0.0299999993;
    u_xlat2.x = u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.x = unity_LightData.z * 0.649999976 + 0.349999994;
    u_xlat7.xyz = (-u_xlat7.xyz) * u_xlat2.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = u_xlat0.xxx * _MainLightPosition.xyz;
    u_xlat3.xyz = (-_MainLightPosition.xyz) * u_xlat0.xxx + vec3(0.550000012, 0.529999971, 0.439999998);
    u_xlat3.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat3.xyz + u_xlat9.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, vs_TEXCOORD3.xyz);
    u_xlat0.x = u_xlat0.x * _ShadingScale + _ShadingWrap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1 = _RimRotation_EndRun.xyzy + (-_RimRotation.xyzy);
    u_xlat1 = vec4(vec4(MenuLight, MenuLight, MenuLight, MenuLight)) * u_xlat1 + _RimRotation.xyzy;
    u_xlat3.x = u_xlat1.x * 0.841470957;
    u_xlat4 = u_xlat1.xzww * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat5.z = u_xlat4.w * u_xlat1.z + (-u_xlat3.x);
    u_xlat3.z = u_xlat4.w * u_xlat1.z + u_xlat3.x;
    u_xlat6.xy = u_xlat4.xw * u_xlat1.xw + vec2(0.540302277, 0.540302277);
    u_xlat5.w = u_xlat6.y;
    u_xlat5.xy = u_xlat4.xx * u_xlat1.zy + u_xlat4.zy;
    u_xlat3.xy = u_xlat4.xx * u_xlat1.yz + (-u_xlat4.yz);
    u_xlat4.x = u_xlat1.z * u_xlat1.z;
    u_xlat3.w = u_xlat4.x * 0.459697723 + 0.540302277;
    u_xlat4.z = dot(u_xlat3.yzw, u_xlat9.xyz);
    u_xlat6.z = u_xlat3.x;
    u_xlat4.y = dot(u_xlat5.ywz, u_xlat9.xyz);
    u_xlat6.w = u_xlat5.x;
    u_xlat4.x = dot(u_xlat6.xzw, u_xlat9.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, vs_TEXCOORD3.xyz);
    u_xlat3.xy = u_xlat3.xx * vec2(_ShadingScale2, _ShadingScale_End) + vec2(_ShadingWrap2, _ShadingWrap_End);
    u_xlat10.x = (-u_xlat3.x) + u_xlat3.y;
    u_xlat3.x = MenuLight * u_xlat10.x + u_xlat3.x;
    u_xlat10.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat4.x = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat4.x = inversesqrt(u_xlat4.x);
    u_xlat10.xyz = u_xlat10.xyz * u_xlat4.xxx;
    u_xlat4.x = dot(vs_TEXCOORD3.xyz, u_xlat10.xyz);
    u_xlat4.x = (-u_xlat4.x) + 1.0;
    u_xlat4.y = log2(u_xlat4.x);
    u_xlat4.x = max(u_xlat4.x, 9.99999975e-05);
    u_xlat4.x = log2(u_xlat4.x);
    u_xlat4.x = u_xlat4.x * 0.540000021;
    u_xlat4.x = exp2(u_xlat4.x);
    u_xlat4.xy = u_xlat4.xy * vec2(0.870000005, 1.99000001);
    u_xlat11.x = exp2(u_xlat4.y);
    u_xlat11.x = u_xlat11.x * 2.38000011;
    u_xlat3.x = u_xlat3.x * u_xlat11.x;
    u_xlat11.x = unity_LightData.z + 0.400000006;
    u_xlat3.x = u_xlat3.x * u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = _MaskGradientScale * vs_TEXCOORD0.y + _MaskGradientAdd;
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat3.x = min(u_xlat3.x, _RimIntensity);
    u_xlat2.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = (-_HairReduce) + 1.0;
    u_xlat3.x = vs_COLOR0.w * u_xlat3.x + _HairReduce;
    u_xlat2.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = unity_LightData.z * 0.999989986;
    u_xlat3.x = u_xlat3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat3.xxx * vec3(0.566650391, 0.621751487, 0.358490586) + vec3(0.433349609, 0.378248513, 0.641509414);
    u_xlat5.xyz = (-CharShadowColor.xyz) + vec3(0.517647088, 0.517647088, 0.992156923);
    u_xlat5.xyz = vec3(vec3(_UseMenuShadow, _UseMenuShadow, _UseMenuShadow)) * u_xlat5.xyz + CharShadowColor.xyz;
    u_xlat6.xyz = (-u_xlat5.xyz) + vec3(0.462741613, 0.384567499, 0.547169805);
    u_xlat5.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat6.xyz + u_xlat5.xyz;
    u_xlat11.xyz = u_xlat11.xyz + (-u_xlat5.xyz);
    u_xlat11.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor);
#endif
    u_xlat1 = texture(_BaseColor, vs_TEXCOORD4.xy);
    u_xlat1 = (bool(u_xlatb0)) ? vs_COLOR0 : u_xlat1;
    u_xlat5.x = MenuLight * _EndRunBoost + _Value;
    u_xlat5.y = u_xlat5.x * -0.5 + 0.5;
    u_xlat6.x = dot(u_xlat5.xy, u_xlat1.xw);
    u_xlat6.y = dot(u_xlat5.xy, u_xlat1.yw);
    u_xlat6.z = dot(u_xlat5.xy, u_xlat1.zw);
    u_xlat0.x = u_xlat1.w * _Metalness;
    u_xlat3.x = dot(u_xlat6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat5.xyz = (-u_xlat6.xyz) + u_xlat3.xxx;
    u_xlat5.xyz = vec3(vec3(_Desaturate, _Desaturate, _Desaturate)) * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat11.xyz = u_xlat11.xyz * u_xlat5.xyz + u_xlat2.xxx;
    u_xlat6.xyz = (-u_xlat11.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = (-u_xlat7.xyz) * u_xlat6.xyz + (-u_xlat11.xyz);
    u_xlat7.xyz = u_xlat7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz + u_xlat11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xyz = min(max(u_xlat7.xyz, 0.0), 1.0);
#else
    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
#endif
    u_xlat2.x = dot((-u_xlat10.xyz), vs_TEXCOORD3.xyz);
    u_xlat2.x = u_xlat2.x + u_xlat2.x;
    u_xlat3.xyz = vs_TEXCOORD3.xyz * (-u_xlat2.xxx) + (-u_xlat10.xyz);
    u_xlat16_3.xyz = textureLod(_CustomReflection, u_xlat3.xyz, _ReflectionRoughness).xyz;
    u_xlat3.xyz = u_xlat16_3.xyz * u_xlat0.xxx + u_xlat5.xyz;
    u_xlat0.x = u_xlat0.x * unity_LightData.z;
    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat2.x = u_xlat2.x * 0.899999976 + _HighlightSize;
    u_xlat24 = u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * 2.94000006 + -0.150000006;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x + u_xlat24;
    u_xlat4.xyz = u_xlat2.xxx * _MetalHighlightColor.xyz;
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = _MainLightColor.xyz * vec3(vec3(_HighlightIntensity, _HighlightIntensity, _HighlightIntensity));
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat4.xyz * unity_LightData.zzz + u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + u_xlat7.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _SSS_Color.xyz;
    u_xlat21 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD3.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat9.xyz);
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat2.x = vs_COLOR0.x * unity_LightData.z;
    u_xlat2.x = u_xlat2.x * _SSS_Color.w;
    u_xlat21 = u_xlat21 * u_xlat2.x;
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost);
#endif
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat2.xyz : u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(Darken);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken));
#else
    u_xlatb21 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken);
#endif
    u_xlat0.xyz = (bool(u_xlatb21)) ? u_xlat2.xyz : u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"// disassembly error Unable to decode SMOL-V shader
"
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"// disassembly error Unable to decode SMOL-V shader
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	float _BendIntensity;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0.xy = in_POSITION0.yy * hlslcc_mtx4x4unity_ObjectToWorld[1].yz;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yz * in_POSITION0.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yz * in_POSITION0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yz * in_POSITION0.ww + u_xlat0.xy;
    u_xlat2.x = u_xlat0.y + (-_WorldSpaceCameraPos.z);
    u_xlat2.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xy = u_xlat2.xx * vec2(-0.00109999999, -0.000950000016);
    u_xlat0.x = u_xlat0.x * 3.39999997e-06 + u_xlat2.x;
    u_xlat2.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_BendIntensity);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled);
#endif
    u_xlat0.xyz = bool(u_xlatb6) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = in_TEXCOORD0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float MenuLight;
uniform 	vec4 BounceLightColor;
uniform 	vec4 CharShadowColor;
uniform 	float Darken;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseColor;
UNITY_LOCATION(1) uniform mediump samplerCube _CustomReflection;
UNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
in highp vec3 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
mediump float u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_13;
float u_xlat21;
bool u_xlatb21;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat32;
float u_xlat34;
float u_xlat35;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor);
#endif
    u_xlat1 = texture(_BaseColor, vs_TEXCOORD4.xy);
    u_xlat0 = (bool(u_xlatb0)) ? vs_COLOR0 : u_xlat1;
    u_xlat1.x = MenuLight * _EndRunBoost + _Value;
    u_xlat1.y = u_xlat1.x * -0.5 + 0.5;
    u_xlat2.x = dot(u_xlat1.xy, u_xlat0.xw);
    u_xlat2.y = dot(u_xlat1.xy, u_xlat0.yw);
    u_xlat2.z = dot(u_xlat1.xy, u_xlat0.zw);
    u_xlat0.x = u_xlat0.w * _Metalness;
    u_xlat10.x = dot(u_xlat2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat10.xyz = (-u_xlat2.xyz) + u_xlat10.xxx;
    u_xlat10.xyz = vec3(vec3(_Desaturate, _Desaturate, _Desaturate)) * u_xlat10.xyz + u_xlat2.xyz;
    u_xlat1.x = _MaskGradientScale * vs_TEXCOORD0.y + _MaskGradientAdd;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat1.x = min(u_xlat1.x, _RimIntensity);
    vec3 txVec0 = vec3(vs_TEXCOORD1.xy,vs_TEXCOORD1.z);
    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat16_3 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_3 = u_xlat16_11 * _MainLightShadowParams.x + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(0.0>=vs_TEXCOORD1.z);
#else
    u_xlatb11 = 0.0>=vs_TEXCOORD1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(vs_TEXCOORD1.z>=1.0);
#else
    u_xlatb21 = vs_TEXCOORD1.z>=1.0;
#endif
    u_xlatb11 = u_xlatb21 || u_xlatb11;
    u_xlat16_3 = (u_xlatb11) ? 1.0 : u_xlat16_3;
    u_xlat11 = unity_LightData.z * u_xlat16_3 + 0.400000006;
    u_xlat16_3 = u_xlat16_3 * unity_LightData.z;
    u_xlat21 = dot(_MainLightPosition.xyz, _MainLightPosition.xyz);
    u_xlat21 = max(u_xlat21, 1.17549435e-38);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * _MainLightPosition.xyz;
    u_xlat4 = _RimRotation_EndRun.xyzy + (-_RimRotation.xyzy);
    u_xlat4 = vec4(vec4(MenuLight, MenuLight, MenuLight, MenuLight)) * u_xlat4 + _RimRotation.xyzy;
    u_xlat31 = u_xlat4.x * 0.841470957;
    u_xlat5 = u_xlat4.xzww * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat6.z = u_xlat5.w * u_xlat4.z + (-u_xlat31);
    u_xlat7.z = u_xlat5.w * u_xlat4.z + u_xlat31;
    u_xlat8.xy = u_xlat5.xw * u_xlat4.xw + vec2(0.540302277, 0.540302277);
    u_xlat6.w = u_xlat8.y;
    u_xlat6.xy = u_xlat5.xx * u_xlat4.zy + u_xlat5.zy;
    u_xlat7.xy = u_xlat5.xx * u_xlat4.yz + (-u_xlat5.yz);
    u_xlat31 = u_xlat4.z * u_xlat4.z;
    u_xlat7.w = u_xlat31 * 0.459697723 + 0.540302277;
    u_xlat4.z = dot(u_xlat7.yzw, u_xlat2.xyz);
    u_xlat8.z = u_xlat7.x;
    u_xlat4.y = dot(u_xlat6.ywz, u_xlat2.xyz);
    u_xlat8.w = u_xlat6.x;
    u_xlat4.x = dot(u_xlat8.xzw, u_xlat2.xyz);
    u_xlat31 = dot(u_xlat4.xyz, vs_TEXCOORD3.xyz);
    u_xlat4.xy = vec2(u_xlat31) * vec2(_ShadingScale2, _ShadingScale_End) + vec2(_ShadingWrap2, _ShadingWrap_End);
    u_xlat31 = (-u_xlat4.x) + u_xlat4.y;
    u_xlat31 = MenuLight * u_xlat31 + u_xlat4.x;
    u_xlat4.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat32 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat32 = inversesqrt(u_xlat32);
    u_xlat4.xyz = vec3(u_xlat32) * u_xlat4.xyz;
    u_xlat32 = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat34 = log2(u_xlat32);
    u_xlat32 = max(u_xlat32, 9.99999975e-05);
    u_xlat32 = log2(u_xlat32);
    u_xlat32 = u_xlat32 * 0.540000021;
    u_xlat32 = exp2(u_xlat32);
    u_xlat32 = u_xlat32 * 0.870000005;
    u_xlat34 = u_xlat34 * 1.99000001;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * 2.38000011;
    u_xlat31 = u_xlat31 * u_xlat34;
    u_xlat11 = u_xlat11 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat16_3 * 0.649999976 + 0.349999994;
    u_xlat11 = u_xlat11 * u_xlat31;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat11 = (-_HairReduce) + 1.0;
    u_xlat11 = vs_COLOR0.w * u_xlat11 + _HairReduce;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
    u_xlat5.xyz = (-_MainLightPosition.xyz) * vec3(u_xlat21) + vec3(0.550000012, 0.529999971, 0.439999998);
    u_xlat16_13.xyz = (-_MainLightPosition.xyz) * vec3(u_xlat21) + vec3(1.0, 1.0, 1.0);
    u_xlat5.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat5.xyz + u_xlat2.xyz;
    u_xlat11 = dot(u_xlat5.xyz, vs_TEXCOORD3.xyz);
    u_xlat11 = u_xlat11 * _ShadingScale + _ShadingWrap;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat16_3 * 0.999989986;
    u_xlat5.x = u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(0.566650391, 0.621751487, 0.358490586) + vec3(0.433349609, 0.378248513, 0.641509414);
    u_xlat6.xyz = (-CharShadowColor.xyz) + vec3(0.517647088, 0.517647088, 0.992156923);
    u_xlat6.xyz = vec3(vec3(_UseMenuShadow, _UseMenuShadow, _UseMenuShadow)) * u_xlat6.xyz + CharShadowColor.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + vec3(0.462741613, 0.384567499, 0.547169805);
    u_xlat6.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat6.xyz);
    u_xlat5.xyz = vec3(u_xlat11) * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat10.xyz + u_xlat1.xxx;
    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6 = _BounceRotation.xzyy * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat7.xy = u_xlat6.xx * _BounceRotation.yz + (-u_xlat6.yz);
    u_xlat8.z = u_xlat7.x;
    u_xlat9.xy = u_xlat6.xx * _BounceRotation.zy + u_xlat6.zy;
    u_xlat8.w = u_xlat9.x;
    u_xlat8.xy = u_xlat6.xw * _BounceRotation.xy + vec2(0.540302277, 0.540302277);
    u_xlat6.x = dot(u_xlat8.xzw, u_xlat16_13.xyz);
    u_xlat9.w = u_xlat8.y;
    u_xlat34 = _BounceRotation.x * 0.841470957;
    u_xlat9.z = u_xlat6.w * _BounceRotation.z + (-u_xlat34);
    u_xlat7.z = u_xlat6.w * _BounceRotation.z + u_xlat34;
    u_xlat6.y = dot(u_xlat9.ywz, u_xlat16_13.xyz);
    u_xlat34 = _BounceRotation.z * _BounceRotation.z;
    u_xlat7.w = u_xlat34 * 0.459697723 + 0.540302277;
    u_xlat6.z = dot(u_xlat7.yzw, u_xlat16_13.xyz);
    u_xlat34 = dot(u_xlat6.xyz, vs_TEXCOORD3.xyz);
    u_xlat35 = u_xlat34 * _BounceScale_End + _BounceWrapEnd;
    u_xlat34 = u_xlat34 * _BounceScale + _BounceWrap;
    u_xlat35 = (-u_xlat34) + u_xlat35;
    u_xlat34 = MenuLight * u_xlat35 + u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat34) * BounceLightColor.xyz;
    u_xlat34 = vs_TEXCOORD0.y * -0.389999986 + 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat6.xyz;
    u_xlat7.x = vs_TEXCOORD0.z * 0.0299999993;
    u_xlat7.x = u_xlat7.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xyz * u_xlat7.xxx;
    u_xlat6.xyz = (-u_xlat6.xyz) * vec3(u_xlat31) + vec3(1.0, 1.0, 1.0);
    u_xlat5.xyz = (-u_xlat6.xyz) * u_xlat5.xyz + (-u_xlat1.xyz);
    u_xlat5.xyz = u_xlat5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat32) * u_xlat5.xyz + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat31 = dot((-u_xlat4.xyz), vs_TEXCOORD3.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat4.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat31)) + (-u_xlat4.xyz);
    u_xlat16_4.xyz = textureLod(_CustomReflection, u_xlat4.xyz, _ReflectionRoughness).xyz;
    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat0.xxx + u_xlat10.xyz;
    u_xlat0.x = u_xlat0.x * u_xlat16_3;
    u_xlat31 = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
    u_xlat31 = u_xlat31 * 0.899999976 + _HighlightSize;
    u_xlat32 = u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
#else
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 * 2.94000006 + -0.150000006;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + u_xlat32;
    u_xlat4.xyz = vec3(u_xlat31) * _MetalHighlightColor.xyz;
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = _MainLightColor.xyz * vec3(vec3(_HighlightIntensity, _HighlightIntensity, _HighlightIntensity));
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat10.xyz = u_xlat4.xyz * vec3(u_xlat16_3) + u_xlat10.xyz;
    u_xlat31 = u_xlat16_3 * vs_COLOR0.x;
    u_xlat31 = u_xlat31 * _SSS_Color.w;
    u_xlat10.xyz = (-u_xlat1.xyz) + u_xlat10.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat0.xyz) + _SSS_Color.xyz;
    u_xlat30 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat4.xyz = vec3(u_xlat30) * vs_TEXCOORD3.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat30 = (-u_xlat30) + 1.0;
    u_xlat30 = u_xlat30 * u_xlat31;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost);
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(Darken);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken);
#endif
    u_xlat0.xyz = (bool(u_xlatb30)) ? u_xlat1.xyz : u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"// disassembly error Unable to decode SMOL-V shader
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	float _BendIntensity;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0.xy = in_POSITION0.yy * hlslcc_mtx4x4unity_ObjectToWorld[1].yz;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yz * in_POSITION0.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yz * in_POSITION0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yz * in_POSITION0.ww + u_xlat0.xy;
    u_xlat2.x = u_xlat0.y + (-_WorldSpaceCameraPos.z);
    u_xlat2.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xy = u_xlat2.xx * vec2(-0.00109999999, -0.000950000016);
    u_xlat0.x = u_xlat0.x * 3.39999997e-06 + u_xlat2.x;
    u_xlat2.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_BendIntensity);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled);
#endif
    u_xlat0.xyz = bool(u_xlatb6) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;
    vs_TEXCOORD1.w = 0.0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = in_TEXCOORD0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float MenuLight;
uniform 	vec4 BounceLightColor;
uniform 	vec4 CharShadowColor;
uniform 	float Darken;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseColor;
UNITY_LOCATION(1) uniform mediump samplerCube _CustomReflection;
UNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
in highp vec3 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec4 u_xlat10;
float u_xlat11;
bool u_xlatb11;
mediump vec3 u_xlat16_13;
vec2 u_xlat22;
float u_xlat33;
bool u_xlatb33;
float u_xlat34;
bool u_xlatb34;
float u_xlat36;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD1.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat1.xyz = vs_TEXCOORD1.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat1.xy,u_xlat1.z);
    u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_2 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_13.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_2 = u_xlat16_2 * _MainLightShadowParams.x + u_xlat16_13.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.0>=vs_TEXCOORD1.z);
#else
    u_xlatb0 = 0.0>=vs_TEXCOORD1.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(vs_TEXCOORD1.z>=1.0);
#else
    u_xlatb11 = vs_TEXCOORD1.z>=1.0;
#endif
    u_xlatb0 = u_xlatb11 || u_xlatb0;
    u_xlat16_2 = (u_xlatb0) ? 1.0 : u_xlat16_2;
    u_xlat0.x = unity_LightData.z * u_xlat16_2 + 0.400000006;
    u_xlat16_2 = u_xlat16_2 * unity_LightData.z;
    u_xlat11 = dot(_MainLightPosition.xyz, _MainLightPosition.xyz);
    u_xlat11 = max(u_xlat11, 1.17549435e-38);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * _MainLightPosition.xyz;
    u_xlat3 = _RimRotation_EndRun.xyzy + (-_RimRotation.xyzy);
    u_xlat3 = vec4(vec4(MenuLight, MenuLight, MenuLight, MenuLight)) * u_xlat3 + _RimRotation.xyzy;
    u_xlat22.x = u_xlat3.x * 0.841470957;
    u_xlat4 = u_xlat3.xzww * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat5.z = u_xlat4.w * u_xlat3.z + (-u_xlat22.x);
    u_xlat6.z = u_xlat4.w * u_xlat3.z + u_xlat22.x;
    u_xlat7.xy = u_xlat4.xw * u_xlat3.xw + vec2(0.540302277, 0.540302277);
    u_xlat5.w = u_xlat7.y;
    u_xlat5.xy = u_xlat4.xx * u_xlat3.zy + u_xlat4.zy;
    u_xlat6.xy = u_xlat4.xx * u_xlat3.yz + (-u_xlat4.yz);
    u_xlat22.x = u_xlat3.z * u_xlat3.z;
    u_xlat6.w = u_xlat22.x * 0.459697723 + 0.540302277;
    u_xlat3.z = dot(u_xlat6.yzw, u_xlat1.xyz);
    u_xlat7.z = u_xlat6.x;
    u_xlat3.y = dot(u_xlat5.ywz, u_xlat1.xyz);
    u_xlat7.w = u_xlat5.x;
    u_xlat3.x = dot(u_xlat7.xzw, u_xlat1.xyz);
    u_xlat22.x = dot(u_xlat3.xyz, vs_TEXCOORD3.xyz);
    u_xlat22.xy = u_xlat22.xx * vec2(_ShadingScale2, _ShadingScale_End) + vec2(_ShadingWrap2, _ShadingWrap_End);
    u_xlat33 = (-u_xlat22.x) + u_xlat22.y;
    u_xlat22.x = MenuLight * u_xlat33 + u_xlat22.x;
    u_xlat3.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat34 = log2(u_xlat33);
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = log2(u_xlat33);
    u_xlat33 = u_xlat33 * 0.540000021;
    u_xlat33 = exp2(u_xlat33);
    u_xlat33 = u_xlat33 * 0.870000005;
    u_xlat34 = u_xlat34 * 1.99000001;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat34 * 2.38000011;
    u_xlat22.x = u_xlat22.x * u_xlat34;
    u_xlat0.x = u_xlat0.x * u_xlat22.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat22.x = u_xlat16_2 * 0.649999976 + 0.349999994;
    u_xlat0.x = u_xlat0.x * u_xlat22.x;
    u_xlat34 = _MaskGradientScale * vs_TEXCOORD0.y + _MaskGradientAdd;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat34 = min(u_xlat34, _RimIntensity);
    u_xlat0.x = u_xlat0.x * u_xlat34;
    u_xlat34 = (-_HairReduce) + 1.0;
    u_xlat34 = vs_COLOR0.w * u_xlat34 + _HairReduce;
    u_xlat0.x = u_xlat0.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor));
#else
    u_xlatb34 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor);
#endif
    u_xlat4 = texture(_BaseColor, vs_TEXCOORD4.xy);
    u_xlat4 = (bool(u_xlatb34)) ? vs_COLOR0 : u_xlat4;
    u_xlat5.x = MenuLight * _EndRunBoost + _Value;
    u_xlat5.y = u_xlat5.x * -0.5 + 0.5;
    u_xlat6.x = dot(u_xlat5.xy, u_xlat4.xw);
    u_xlat6.y = dot(u_xlat5.xy, u_xlat4.yw);
    u_xlat6.z = dot(u_xlat5.xy, u_xlat4.zw);
    u_xlat34 = u_xlat4.w * _Metalness;
    u_xlat36 = dot(u_xlat6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat4.xyz = (-u_xlat6.xyz) + vec3(u_xlat36);
    u_xlat4.xyz = vec3(vec3(_Desaturate, _Desaturate, _Desaturate)) * u_xlat4.xyz + u_xlat6.xyz;
    u_xlat5.x = u_xlat16_2 * 0.999989986;
    u_xlat5.x = u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(0.566650391, 0.621751487, 0.358490586) + vec3(0.433349609, 0.378248513, 0.641509414);
    u_xlat6.xyz = (-CharShadowColor.xyz) + vec3(0.517647088, 0.517647088, 0.992156923);
    u_xlat6.xyz = vec3(vec3(_UseMenuShadow, _UseMenuShadow, _UseMenuShadow)) * u_xlat6.xyz + CharShadowColor.xyz;
    u_xlat7.xyz = (-u_xlat6.xyz) + vec3(0.462741613, 0.384567499, 0.547169805);
    u_xlat6.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat7.xyz + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat6.xyz);
    u_xlat7.xyz = (-_MainLightPosition.xyz) * vec3(u_xlat11) + vec3(0.550000012, 0.529999971, 0.439999998);
    u_xlat16_13.xyz = (-_MainLightPosition.xyz) * vec3(u_xlat11) + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat7.xyz + u_xlat1.xyz;
    u_xlat11 = dot(u_xlat7.xyz, vs_TEXCOORD3.xyz);
    u_xlat11 = u_xlat11 * _ShadingScale + _ShadingWrap;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat11) * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.xyz + u_xlat0.xxx;
    u_xlat6.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7 = _BounceRotation.xzyy * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat8.xy = u_xlat7.xx * _BounceRotation.yz + (-u_xlat7.yz);
    u_xlat9.z = u_xlat8.x;
    u_xlat10.xy = u_xlat7.xx * _BounceRotation.zy + u_xlat7.zy;
    u_xlat9.w = u_xlat10.x;
    u_xlat9.xy = u_xlat7.xw * _BounceRotation.xy + vec2(0.540302277, 0.540302277);
    u_xlat7.x = dot(u_xlat9.xzw, u_xlat16_13.xyz);
    u_xlat10.w = u_xlat9.y;
    u_xlat0.x = _BounceRotation.x * 0.841470957;
    u_xlat10.z = u_xlat7.w * _BounceRotation.z + (-u_xlat0.x);
    u_xlat8.z = u_xlat7.w * _BounceRotation.z + u_xlat0.x;
    u_xlat7.y = dot(u_xlat10.ywz, u_xlat16_13.xyz);
    u_xlat0.x = _BounceRotation.z * _BounceRotation.z;
    u_xlat8.w = u_xlat0.x * 0.459697723 + 0.540302277;
    u_xlat7.z = dot(u_xlat8.yzw, u_xlat16_13.xyz);
    u_xlat0.x = dot(u_xlat7.xyz, vs_TEXCOORD3.xyz);
    u_xlat11 = u_xlat0.x * _BounceScale_End + _BounceWrapEnd;
    u_xlat0.x = u_xlat0.x * _BounceScale + _BounceWrap;
    u_xlat11 = (-u_xlat0.x) + u_xlat11;
    u_xlat0.x = MenuLight * u_xlat11 + u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat0.xxx * BounceLightColor.xyz;
    u_xlat0.x = vs_TEXCOORD0.y * -0.389999986 + 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.x = vs_TEXCOORD0.z * 0.0299999993;
    u_xlat0.x = u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat0.xxx * u_xlat7.xyz;
    u_xlat0.xyz = (-u_xlat7.xyz) * u_xlat22.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * u_xlat6.xyz + (-u_xlat5.xyz);
    u_xlat0.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat33 = dot((-u_xlat3.xyz), vs_TEXCOORD3.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat3.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat33)) + (-u_xlat3.xyz);
    u_xlat16_3.xyz = textureLod(_CustomReflection, u_xlat3.xyz, _ReflectionRoughness).xyz;
    u_xlat3.xyz = u_xlat16_3.xyz * vec3(u_xlat34) + u_xlat4.xyz;
    u_xlat33 = u_xlat16_2 * u_xlat34;
    u_xlat34 = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat34 = u_xlat34 * 0.899999976 + _HighlightSize;
    u_xlat36 = u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 * 2.94000006 + -0.150000006;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + u_xlat36;
    u_xlat4.xyz = vec3(u_xlat34) * _MetalHighlightColor.xyz;
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = _MainLightColor.xyz * vec3(vec3(_HighlightIntensity, _HighlightIntensity, _HighlightIntensity));
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat34 = u_xlat16_2 * vs_COLOR0.x;
    u_xlat34 = u_xlat34 * _SSS_Color.w;
    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat3.xyz = (-u_xlat0.xyz) + _SSS_Color.xyz;
    u_xlat33 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * vs_TEXCOORD3.xyz;
    u_xlat33 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat33 = (-u_xlat33) + 1.0;
    u_xlat33 = u_xlat33 * u_xlat34;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost);
#endif
    u_xlat0.xyz = (bool(u_xlatb33)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(Darken);
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken));
#else
    u_xlatb33 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken);
#endif
    u_xlat0.xyz = (bool(u_xlatb33)) ? u_xlat1.xyz : u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _BendIntensity;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0.xy = in_POSITION0.yy * hlslcc_mtx4x4unity_ObjectToWorld[1].yz;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yz * in_POSITION0.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yz * in_POSITION0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yz * in_POSITION0.ww + u_xlat0.xy;
    u_xlat2.x = u_xlat0.y + (-_WorldSpaceCameraPos.z);
    u_xlat2.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xy = u_xlat2.xx * vec2(-0.00109999999, -0.000950000016);
    u_xlat0.x = u_xlat0.x * 3.39999997e-06 + u_xlat2.x;
    u_xlat2.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_BendIntensity);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled);
#endif
    u_xlat0.xyz = bool(u_xlatb6) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = in_TEXCOORD0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float MenuLight;
uniform 	vec4 BounceLightColor;
uniform 	vec4 CharShadowColor;
uniform 	float Darken;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseColor;
UNITY_LOCATION(1) uniform mediump samplerCube _CustomReflection;
UNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
in highp vec3 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
int u_xlati2;
uint u_xlatu2;
vec4 u_xlat3;
bool u_xlatb3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_15;
float u_xlat18;
vec2 u_xlat20;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
bool u_xlatb29;
float u_xlat30;
void main()
{
    u_xlat0.x = dot(_MainLightPosition.xyz, _MainLightPosition.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_1.xyz = (-_MainLightPosition.xyz) * u_xlat0.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat2 = _BounceRotation.xzyy * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat3.xy = u_xlat2.xx * _BounceRotation.yz + (-u_xlat2.yz);
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xy = u_xlat2.xx * _BounceRotation.zy + u_xlat2.zy;
    u_xlat4.w = u_xlat5.x;
    u_xlat4.xy = u_xlat2.xw * _BounceRotation.xy + vec2(0.540302277, 0.540302277);
    u_xlat2.x = dot(u_xlat4.xzw, u_xlat16_1.xyz);
    u_xlat5.w = u_xlat4.y;
    u_xlat9.x = _BounceRotation.x * 0.841470957;
    u_xlat5.z = u_xlat2.w * _BounceRotation.z + (-u_xlat9.x);
    u_xlat3.z = u_xlat2.w * _BounceRotation.z + u_xlat9.x;
    u_xlat2.y = dot(u_xlat5.ywz, u_xlat16_1.xyz);
    u_xlat9.x = _BounceRotation.z * _BounceRotation.z;
    u_xlat3.w = u_xlat9.x * 0.459697723 + 0.540302277;
    u_xlat2.z = dot(u_xlat3.yzw, u_xlat16_1.xyz);
    u_xlat9.x = dot(u_xlat2.xyz, vs_TEXCOORD3.xyz);
    u_xlat18 = u_xlat9.x * _BounceScale_End + _BounceWrapEnd;
    u_xlat9.x = u_xlat9.x * _BounceScale + _BounceWrap;
    u_xlat18 = (-u_xlat9.x) + u_xlat18;
    u_xlat9.x = MenuLight * u_xlat18 + u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * BounceLightColor.xyz;
    u_xlat2.x = vs_TEXCOORD0.y * -0.389999986 + 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat2.x = vs_TEXCOORD0.z * 0.0299999993;
    u_xlat2.x = u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat2.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu2 = uint(u_xlat16_6.x);
    u_xlati2 = int(int(u_xlatu2) << 2);
    u_xlat11.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 1)].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati2].xyz * vs_TEXCOORD0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat11.xyz;
    u_xlat2.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 3)].xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb29 = !!(0.0>=u_xlat2.z);
#else
    u_xlatb29 = 0.0>=u_xlat2.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat2.z>=1.0);
#else
    u_xlatb3 = u_xlat2.z>=1.0;
#endif
    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
    u_xlat16_2.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlatb11 = u_xlatb29 || u_xlatb3;
    u_xlat16_6.x = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_2.x * _MainLightShadowParams.x + u_xlat16_6.x;
    u_xlat16_6.x = (u_xlatb11) ? 1.0 : u_xlat16_6.x;
    u_xlat16_15 = u_xlat16_6.x * unity_LightData.z;
    u_xlat2.x = unity_LightData.z * u_xlat16_6.x + 0.400000006;
    u_xlat11.x = u_xlat16_15 * 0.649999976 + 0.349999994;
    u_xlat9.xyz = (-u_xlat9.xyz) * u_xlat11.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat0.xxx * _MainLightPosition.xyz;
    u_xlat4.xyz = (-_MainLightPosition.xyz) * u_xlat0.xxx + vec3(0.550000012, 0.529999971, 0.439999998);
    u_xlat4.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat4.xyz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, vs_TEXCOORD3.xyz);
    u_xlat0.x = u_xlat0.x * _ShadingScale + _ShadingWrap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1 = _RimRotation_EndRun.xyzy + (-_RimRotation.xyzy);
    u_xlat1 = vec4(vec4(MenuLight, MenuLight, MenuLight, MenuLight)) * u_xlat1 + _RimRotation.xyzy;
    u_xlat20.x = u_xlat1.x * 0.841470957;
    u_xlat4 = u_xlat1.xzww * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat5.z = u_xlat4.w * u_xlat1.z + (-u_xlat20.x);
    u_xlat7.z = u_xlat4.w * u_xlat1.z + u_xlat20.x;
    u_xlat8.xy = u_xlat4.xw * u_xlat1.xw + vec2(0.540302277, 0.540302277);
    u_xlat5.w = u_xlat8.y;
    u_xlat5.xy = u_xlat4.xx * u_xlat1.zy + u_xlat4.zy;
    u_xlat7.xy = u_xlat4.xx * u_xlat1.yz + (-u_xlat4.yz);
    u_xlat20.x = u_xlat1.z * u_xlat1.z;
    u_xlat7.w = u_xlat20.x * 0.459697723 + 0.540302277;
    u_xlat4.z = dot(u_xlat7.yzw, u_xlat3.xyz);
    u_xlat8.z = u_xlat7.x;
    u_xlat4.y = dot(u_xlat5.ywz, u_xlat3.xyz);
    u_xlat8.w = u_xlat5.x;
    u_xlat4.x = dot(u_xlat8.xzw, u_xlat3.xyz);
    u_xlat20.x = dot(u_xlat4.xyz, vs_TEXCOORD3.xyz);
    u_xlat20.xy = u_xlat20.xx * vec2(_ShadingScale2, _ShadingScale_End) + vec2(_ShadingWrap2, _ShadingWrap_End);
    u_xlat29 = (-u_xlat20.x) + u_xlat20.y;
    u_xlat20.x = MenuLight * u_xlat29 + u_xlat20.x;
    u_xlat4.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;
    u_xlat29 = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat30 = log2(u_xlat29);
    u_xlat29 = max(u_xlat29, 9.99999975e-05);
    u_xlat29 = log2(u_xlat29);
    u_xlat29 = u_xlat29 * 0.540000021;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = u_xlat29 * 0.870000005;
    u_xlat30 = u_xlat30 * 1.99000001;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * 2.38000011;
    u_xlat20.x = u_xlat20.x * u_xlat30;
    u_xlat2.x = u_xlat2.x * u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat11.x;
    u_xlat11.x = _MaskGradientScale * vs_TEXCOORD0.y + _MaskGradientAdd;
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlat11.x = min(u_xlat11.x, _RimIntensity);
    u_xlat2.x = u_xlat11.x * u_xlat2.x;
    u_xlat11.x = (-_HairReduce) + 1.0;
    u_xlat11.x = vs_COLOR0.w * u_xlat11.x + _HairReduce;
    u_xlat2.x = u_xlat11.x * u_xlat2.x;
    u_xlat5.x = u_xlat16_15 * 0.999989986;
    u_xlat5.x = u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(0.566650391, 0.621751487, 0.358490586) + vec3(0.433349609, 0.378248513, 0.641509414);
    u_xlat7.xyz = (-CharShadowColor.xyz) + vec3(0.517647088, 0.517647088, 0.992156923);
    u_xlat7.xyz = vec3(vec3(_UseMenuShadow, _UseMenuShadow, _UseMenuShadow)) * u_xlat7.xyz + CharShadowColor.xyz;
    u_xlat8.xyz = (-u_xlat7.xyz) + vec3(0.462741613, 0.384567499, 0.547169805);
    u_xlat7.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat8.xyz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor);
#endif
    u_xlat1 = texture(_BaseColor, vs_TEXCOORD4.xy);
    u_xlat1 = (bool(u_xlatb0)) ? vs_COLOR0 : u_xlat1;
    u_xlat7.x = MenuLight * _EndRunBoost + _Value;
    u_xlat7.y = u_xlat7.x * -0.5 + 0.5;
    u_xlat8.x = dot(u_xlat7.xy, u_xlat1.xw);
    u_xlat8.y = dot(u_xlat7.xy, u_xlat1.yw);
    u_xlat8.z = dot(u_xlat7.xy, u_xlat1.zw);
    u_xlat0.x = u_xlat1.w * _Metalness;
    u_xlat11.x = dot(u_xlat8.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat11.xxx;
    u_xlat7.xyz = vec3(vec3(_Desaturate, _Desaturate, _Desaturate)) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat5.xyz * u_xlat7.xyz + u_xlat2.xxx;
    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat9.xyz) * u_xlat5.xyz + (-u_xlat2.xyz);
    u_xlat9.xyz = u_xlat9.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = vec3(u_xlat29) * u_xlat9.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat2.x = dot((-u_xlat4.xyz), vs_TEXCOORD3.xyz);
    u_xlat2.x = u_xlat2.x + u_xlat2.x;
    u_xlat2.xyz = vs_TEXCOORD3.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
    u_xlat16_2.xyz = textureLod(_CustomReflection, u_xlat2.xyz, _ReflectionRoughness).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.x = u_xlat16_15 * u_xlat0.x;
    u_xlat29 = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat29 = u_xlat29 * 0.899999976 + _HighlightSize;
    u_xlat30 = u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat29 * 2.94000006 + -0.150000006;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat29 + u_xlat30;
    u_xlat4.xyz = vec3(u_xlat29) * _MetalHighlightColor.xyz;
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = _MainLightColor.xyz * vec3(vec3(_HighlightIntensity, _HighlightIntensity, _HighlightIntensity));
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat29 = u_xlat16_15 * vs_COLOR0.x;
    u_xlat29 = u_xlat29 * _SSS_Color.w;
    u_xlat2.xyz = (-u_xlat9.xyz) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat0.xyz) + _SSS_Color.xyz;
    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat29;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost);
#endif
    u_xlat0.xyz = (bool(u_xlatb27)) ? u_xlat2.xyz : u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(Darken);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken);
#endif
    u_xlat0.xyz = (bool(u_xlatb27)) ? u_xlat2.xyz : u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
"// disassembly error Unable to decode SMOL-V shader
"
}
SubProgram "gles3 " {
Keywords { "_MAIN_LIGHT_SHADOWS" "_MAIN_LIGHT_SHADOWS_CASCADE" "_SHADOWS_SOFT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _BendIntensity;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0.xy = in_POSITION0.yy * hlslcc_mtx4x4unity_ObjectToWorld[1].yz;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yz * in_POSITION0.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yz * in_POSITION0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yz * in_POSITION0.ww + u_xlat0.xy;
    u_xlat2.x = u_xlat0.y + (-_WorldSpaceCameraPos.z);
    u_xlat2.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xy = u_xlat2.xx * vec2(-0.00109999999, -0.000950000016);
    u_xlat0.x = u_xlat0.x * 3.39999997e-06 + u_xlat2.x;
    u_xlat2.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_BendIntensity);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled);
#endif
    u_xlat0.xyz = bool(u_xlatb6) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD3.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD3.w = 0.0;
    vs_TEXCOORD4.xyz = in_TEXCOORD0.xyz;
    vs_TEXCOORD4.w = 0.0;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _MainLightPosition;
uniform 	mediump vec4 _MainLightColor;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];
uniform 	vec4 _CascadeShadowSplitSpheres0;
uniform 	vec4 _CascadeShadowSplitSpheres1;
uniform 	vec4 _CascadeShadowSplitSpheres2;
uniform 	vec4 _CascadeShadowSplitSpheres3;
uniform 	vec4 _CascadeShadowSplitSphereRadii;
uniform 	mediump vec4 _MainLightShadowOffset0;
uniform 	mediump vec4 _MainLightShadowOffset1;
uniform 	mediump vec4 _MainLightShadowOffset2;
uniform 	mediump vec4 _MainLightShadowOffset3;
uniform 	mediump vec4 _MainLightShadowParams;
uniform 	float MenuLight;
uniform 	vec4 BounceLightColor;
uniform 	vec4 CharShadowColor;
uniform 	float Darken;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
UNITY_LOCATION(0) uniform mediump sampler2D _BaseColor;
UNITY_LOCATION(1) uniform mediump samplerCube _CustomReflection;
UNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;
UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;
in highp vec3 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
int u_xlati2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat11;
bool u_xlatb11;
mediump float u_xlat16_15;
float u_xlat18;
vec2 u_xlat20;
float u_xlat27;
bool u_xlatb27;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat0.x = dot(_MainLightPosition.xyz, _MainLightPosition.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat16_1.xyz = (-_MainLightPosition.xyz) * u_xlat0.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat2 = _BounceRotation.xzyy * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat3.xy = u_xlat2.xx * _BounceRotation.yz + (-u_xlat2.yz);
    u_xlat4.z = u_xlat3.x;
    u_xlat5.xy = u_xlat2.xx * _BounceRotation.zy + u_xlat2.zy;
    u_xlat4.w = u_xlat5.x;
    u_xlat4.xy = u_xlat2.xw * _BounceRotation.xy + vec2(0.540302277, 0.540302277);
    u_xlat2.x = dot(u_xlat4.xzw, u_xlat16_1.xyz);
    u_xlat5.w = u_xlat4.y;
    u_xlat9.x = _BounceRotation.x * 0.841470957;
    u_xlat5.z = u_xlat2.w * _BounceRotation.z + (-u_xlat9.x);
    u_xlat3.z = u_xlat2.w * _BounceRotation.z + u_xlat9.x;
    u_xlat2.y = dot(u_xlat5.ywz, u_xlat16_1.xyz);
    u_xlat9.x = _BounceRotation.z * _BounceRotation.z;
    u_xlat3.w = u_xlat9.x * 0.459697723 + 0.540302277;
    u_xlat2.z = dot(u_xlat3.yzw, u_xlat16_1.xyz);
    u_xlat9.x = dot(u_xlat2.xyz, vs_TEXCOORD3.xyz);
    u_xlat18 = u_xlat9.x * _BounceScale_End + _BounceWrapEnd;
    u_xlat9.x = u_xlat9.x * _BounceScale + _BounceWrap;
    u_xlat18 = (-u_xlat9.x) + u_xlat18;
    u_xlat9.x = MenuLight * u_xlat18 + u_xlat9.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
#else
    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xxx * BounceLightColor.xyz;
    u_xlat2.x = vs_TEXCOORD0.y * -0.389999986 + 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat2.x = vs_TEXCOORD0.z * 0.0299999993;
    u_xlat2.x = u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat9.xyz = u_xlat9.xyz * u_xlat2.xxx;
    u_xlat2.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres1.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres2.xyz);
    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.xyz = vs_TEXCOORD0.xyz + (-_CascadeShadowSplitSpheres3.xyz);
    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlatb1 = lessThan(u_xlat1, _CascadeShadowSplitSphereRadii);
    u_xlat16_6.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.x = (u_xlatb1.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb1.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb1.z) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb1.w) ? float(1.0) : float(0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_1.yzw;
    u_xlat16_1.yzw = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.x = dot(u_xlat16_1, vec4(4.0, 3.0, 2.0, 1.0));
    u_xlat16_6.x = (-u_xlat16_6.x) + 4.0;
    u_xlatu2 = uint(u_xlat16_6.x);
    u_xlati2 = int(int(u_xlatu2) << 2);
    u_xlat11.xyz = vs_TEXCOORD0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 1)].xyz;
    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati2].xyz * vs_TEXCOORD0.xxx + u_xlat11.xyz;
    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 2)].xyz * vs_TEXCOORD0.zzz + u_xlat11.xyz;
    u_xlat2.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati2 + 3)].xyz;
    u_xlat3.xyz = u_xlat2.xyz + _MainLightShadowOffset0.xyz;
    vec3 txVec0 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);
    u_xlat3.xyz = u_xlat2.xyz + _MainLightShadowOffset1.xyz;
    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_1.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);
    u_xlat3.xyz = u_xlat2.xyz + _MainLightShadowOffset2.xyz;
    vec3 txVec2 = vec3(u_xlat3.xy,u_xlat3.z);
    u_xlat16_1.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);
    u_xlat2.xyw = u_xlat2.xyz + _MainLightShadowOffset3.xyz;
    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat2.w);
    u_xlat16_1.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);
    u_xlat16_6.x = dot(u_xlat16_1, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat16_15 = (-_MainLightShadowParams.x) + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * _MainLightShadowParams.x + u_xlat16_15;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0>=u_xlat2.z);
#else
    u_xlatb2 = 0.0>=u_xlat2.z;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat2.z>=1.0);
#else
    u_xlatb11 = u_xlat2.z>=1.0;
#endif
    u_xlatb2 = u_xlatb11 || u_xlatb2;
    u_xlat16_6.x = (u_xlatb2) ? 1.0 : u_xlat16_6.x;
    u_xlat16_15 = u_xlat16_6.x * unity_LightData.z;
    u_xlat2.x = unity_LightData.z * u_xlat16_6.x + 0.400000006;
    u_xlat11.x = u_xlat16_15 * 0.649999976 + 0.349999994;
    u_xlat9.xyz = (-u_xlat9.xyz) * u_xlat11.xxx + vec3(1.0, 1.0, 1.0);
    u_xlat3.xyz = u_xlat0.xxx * _MainLightPosition.xyz;
    u_xlat4.xyz = (-_MainLightPosition.xyz) * u_xlat0.xxx + vec3(0.550000012, 0.529999971, 0.439999998);
    u_xlat4.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat4.xyz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat4.xyz, vs_TEXCOORD3.xyz);
    u_xlat0.x = u_xlat0.x * _ShadingScale + _ShadingWrap;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat1 = _RimRotation_EndRun.xyzy + (-_RimRotation.xyzy);
    u_xlat1 = vec4(vec4(MenuLight, MenuLight, MenuLight, MenuLight)) * u_xlat1 + _RimRotation.xyzy;
    u_xlat20.x = u_xlat1.x * 0.841470957;
    u_xlat4 = u_xlat1.xzww * vec4(0.459697723, 0.841470957, 0.841470957, 0.459697723);
    u_xlat5.z = u_xlat4.w * u_xlat1.z + (-u_xlat20.x);
    u_xlat7.z = u_xlat4.w * u_xlat1.z + u_xlat20.x;
    u_xlat8.xy = u_xlat4.xw * u_xlat1.xw + vec2(0.540302277, 0.540302277);
    u_xlat5.w = u_xlat8.y;
    u_xlat5.xy = u_xlat4.xx * u_xlat1.zy + u_xlat4.zy;
    u_xlat7.xy = u_xlat4.xx * u_xlat1.yz + (-u_xlat4.yz);
    u_xlat20.x = u_xlat1.z * u_xlat1.z;
    u_xlat7.w = u_xlat20.x * 0.459697723 + 0.540302277;
    u_xlat4.z = dot(u_xlat7.yzw, u_xlat3.xyz);
    u_xlat8.z = u_xlat7.x;
    u_xlat4.y = dot(u_xlat5.ywz, u_xlat3.xyz);
    u_xlat8.w = u_xlat5.x;
    u_xlat4.x = dot(u_xlat8.xzw, u_xlat3.xyz);
    u_xlat20.x = dot(u_xlat4.xyz, vs_TEXCOORD3.xyz);
    u_xlat20.xy = u_xlat20.xx * vec2(_ShadingScale2, _ShadingScale_End) + vec2(_ShadingWrap2, _ShadingWrap_End);
    u_xlat29 = (-u_xlat20.x) + u_xlat20.y;
    u_xlat20.x = MenuLight * u_xlat29 + u_xlat20.x;
    u_xlat4.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat29 = inversesqrt(u_xlat29);
    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz;
    u_xlat29 = dot(vs_TEXCOORD3.xyz, u_xlat4.xyz);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat30 = log2(u_xlat29);
    u_xlat29 = max(u_xlat29, 9.99999975e-05);
    u_xlat29 = log2(u_xlat29);
    u_xlat29 = u_xlat29 * 0.540000021;
    u_xlat29 = exp2(u_xlat29);
    u_xlat29 = u_xlat29 * 0.870000005;
    u_xlat30 = u_xlat30 * 1.99000001;
    u_xlat30 = exp2(u_xlat30);
    u_xlat30 = u_xlat30 * 2.38000011;
    u_xlat20.x = u_xlat20.x * u_xlat30;
    u_xlat2.x = u_xlat2.x * u_xlat20.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat2.x * u_xlat11.x;
    u_xlat11.x = _MaskGradientScale * vs_TEXCOORD0.y + _MaskGradientAdd;
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlat11.x = min(u_xlat11.x, _RimIntensity);
    u_xlat2.x = u_xlat11.x * u_xlat2.x;
    u_xlat11.x = (-_HairReduce) + 1.0;
    u_xlat11.x = vs_COLOR0.w * u_xlat11.x + _HairReduce;
    u_xlat2.x = u_xlat11.x * u_xlat2.x;
    u_xlat5.x = u_xlat16_15 * 0.999989986;
    u_xlat5.x = u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.xyz = u_xlat5.xxx * vec3(0.566650391, 0.621751487, 0.358490586) + vec3(0.433349609, 0.378248513, 0.641509414);
    u_xlat7.xyz = (-CharShadowColor.xyz) + vec3(0.517647088, 0.517647088, 0.992156923);
    u_xlat7.xyz = vec3(vec3(_UseMenuShadow, _UseMenuShadow, _UseMenuShadow)) * u_xlat7.xyz + CharShadowColor.xyz;
    u_xlat8.xyz = (-u_xlat7.xyz) + vec3(0.462741613, 0.384567499, 0.547169805);
    u_xlat7.xyz = vec3(vec3(MenuLight, MenuLight, MenuLight)) * u_xlat8.xyz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + (-u_xlat7.xyz);
    u_xlat5.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseVertexColor);
#endif
    u_xlat1 = texture(_BaseColor, vs_TEXCOORD4.xy);
    u_xlat1 = (bool(u_xlatb0)) ? vs_COLOR0 : u_xlat1;
    u_xlat7.x = MenuLight * _EndRunBoost + _Value;
    u_xlat7.y = u_xlat7.x * -0.5 + 0.5;
    u_xlat8.x = dot(u_xlat7.xy, u_xlat1.xw);
    u_xlat8.y = dot(u_xlat7.xy, u_xlat1.yw);
    u_xlat8.z = dot(u_xlat7.xy, u_xlat1.zw);
    u_xlat0.x = u_xlat1.w * _Metalness;
    u_xlat11.x = dot(u_xlat8.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat7.xyz = (-u_xlat8.xyz) + u_xlat11.xxx;
    u_xlat7.xyz = vec3(vec3(_Desaturate, _Desaturate, _Desaturate)) * u_xlat7.xyz + u_xlat8.xyz;
    u_xlat2.xyz = u_xlat5.xyz * u_xlat7.xyz + u_xlat2.xxx;
    u_xlat5.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = (-u_xlat9.xyz) * u_xlat5.xyz + (-u_xlat2.xyz);
    u_xlat9.xyz = u_xlat9.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat9.xyz = vec3(u_xlat29) * u_xlat9.xyz + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xyz = min(max(u_xlat9.xyz, 0.0), 1.0);
#else
    u_xlat9.xyz = clamp(u_xlat9.xyz, 0.0, 1.0);
#endif
    u_xlat2.x = dot((-u_xlat4.xyz), vs_TEXCOORD3.xyz);
    u_xlat2.x = u_xlat2.x + u_xlat2.x;
    u_xlat2.xyz = vs_TEXCOORD3.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
    u_xlat16_2.xyz = textureLod(_CustomReflection, u_xlat2.xyz, _ReflectionRoughness).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * u_xlat0.xxx + u_xlat7.xyz;
    u_xlat0.x = u_xlat16_15 * u_xlat0.x;
    u_xlat29 = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
    u_xlat29 = u_xlat29 * 0.899999976 + _HighlightSize;
    u_xlat30 = u_xlat29;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat29 * 2.94000006 + -0.150000006;
#ifdef UNITY_ADRENO_ES3
    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
#else
    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
#endif
    u_xlat29 = u_xlat29 + u_xlat30;
    u_xlat4.xyz = vec3(u_xlat29) * _MetalHighlightColor.xyz;
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = _MainLightColor.xyz * vec3(vec3(_HighlightIntensity, _HighlightIntensity, _HighlightIntensity));
    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat29 = u_xlat16_15 * vs_COLOR0.x;
    u_xlat29 = u_xlat29 * _SSS_Color.w;
    u_xlat2.xyz = (-u_xlat9.xyz) + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
    u_xlat2.xyz = (-u_xlat0.xyz) + _SSS_Color.xyz;
    u_xlat27 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat4.xyz = vec3(u_xlat27) * vs_TEXCOORD3.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat27 = u_xlat27 * u_xlat29;
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_SSS_Boost);
#endif
    u_xlat0.xyz = (bool(u_xlatb27)) ? u_xlat2.xyz : u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(Darken);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UseDarken);
#endif
    u_xlat0.xyz = (bool(u_xlatb27)) ? u_xlat2.xyz : u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "vulkan " {
Keywords { "_MAIN_LIGHT_SHADOWS" }
"// disassembly error Unable to decode SMOL-V shader
"
}
}
}
 Pass {
  Name "ShadowCaster"
  Tags { "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Geometry" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" }
  GpuProgramID 78937
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ShadowBias;
uniform 	float _BendIntensity;
uniform 	vec3 _LightDirection;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0.xy = in_POSITION0.yy * hlslcc_mtx4x4unity_ObjectToWorld[1].yz;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yz * in_POSITION0.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yz * in_POSITION0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yz * in_POSITION0.ww + u_xlat0.xy;
    u_xlat2.x = u_xlat0.y + (-_WorldSpaceCameraPos.z);
    u_xlat2.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xy = u_xlat2.xx * vec2(-0.00109999999, -0.000950000016);
    u_xlat0.x = u_xlat0.x * 3.39999997e-06 + u_xlat2.x;
    u_xlat2.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_BendIntensity);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled);
#endif
    u_xlat0.xyz = bool(u_xlatb6) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = vec3(_LightDirection.x, _LightDirection.y, _LightDirection.z) * _ShadowBias.xxx + u_xlat0.xyz;
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = max(u_xlat6, 1.17549435e-38);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
    u_xlat6 = dot(vec3(_LightDirection.x, _LightDirection.y, _LightDirection.z), u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat6 * _ShadowBias.y;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    gl_Position.z = max((-u_xlat0.w), u_xlat0.z);
    gl_Position.xyw = u_xlat0.xyw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"// disassembly error Unable to decode SMOL-V shader
"
}
}
}
 Pass {
  Name "DepthOnly"
  Tags { "LIGHTMODE" = "DepthOnly" "QUEUE" = "Geometry" "RenderPipeline" = "UniversalPipeline" "RenderType" = "Opaque" }
  ColorMask 0 0
  GpuProgramID 182279
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	float _BendIntensity;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(0) uniform UnityPerDraw {
#endif
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	UNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	UNITY_UNIFORM vec4 unity_LODFade;
	UNITY_UNIFORM mediump vec4 unity_WorldTransformParams;
	UNITY_UNIFORM mediump vec4 unity_LightData;
	UNITY_UNIFORM mediump vec4 unity_LightIndices[2];
	UNITY_UNIFORM vec4 unity_ProbesOcclusion;
	UNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;
	UNITY_UNIFORM vec4 unity_LightmapST;
	UNITY_UNIFORM vec4 unity_DynamicLightmapST;
	UNITY_UNIFORM mediump vec4 unity_SHAr;
	UNITY_UNIFORM mediump vec4 unity_SHAg;
	UNITY_UNIFORM mediump vec4 unity_SHAb;
	UNITY_UNIFORM mediump vec4 unity_SHBr;
	UNITY_UNIFORM mediump vec4 unity_SHBg;
	UNITY_UNIFORM mediump vec4 unity_SHBb;
	UNITY_UNIFORM mediump vec4 unity_SHC;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
UNITY_BINDING(1) uniform UnityPerMaterial {
#endif
	UNITY_UNIFORM vec4 _SSS_Color;
	UNITY_UNIFORM vec4 _MetalHighlightColor;
	UNITY_UNIFORM vec3 _RimRotation_EndRun;
	UNITY_UNIFORM vec3 _RimRotation;
	UNITY_UNIFORM vec3 _BounceRotation;
	UNITY_UNIFORM float _BounceScale;
	UNITY_UNIFORM float _ReflectionRoughness;
	UNITY_UNIFORM float _HighlightIntensity;
	UNITY_UNIFORM float _HighlightSize;
	UNITY_UNIFORM float _UseDarken;
	UNITY_UNIFORM float _HairReduce;
	UNITY_UNIFORM float _RimIntensity;
	UNITY_UNIFORM float _MaskGradientAdd;
	UNITY_UNIFORM float _MaskGradientScale;
	UNITY_UNIFORM float _ShadingWrap_End;
	UNITY_UNIFORM float _ShadingScale_End;
	UNITY_UNIFORM float _ShadingWrap2;
	UNITY_UNIFORM float _ShadingScale2;
	UNITY_UNIFORM float _Metalness;
	UNITY_UNIFORM float _Desaturate;
	UNITY_UNIFORM float _UseVertexColor;
	UNITY_UNIFORM float _EndRunBoost;
	UNITY_UNIFORM float _Value;
	UNITY_UNIFORM float _ShadingWrap;
	UNITY_UNIFORM float _ShadingScale;
	UNITY_UNIFORM float _UseMenuShadow;
	UNITY_UNIFORM float _BounceWrapEnd;
	UNITY_UNIFORM float _BounceScale_End;
	UNITY_UNIFORM float _BounceWrap;
	UNITY_UNIFORM float _SSS_Boost;
	UNITY_UNIFORM float _BendEnabled;
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
};
#endif
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb6;
void main()
{
    u_xlat0.xy = in_POSITION0.yy * hlslcc_mtx4x4unity_ObjectToWorld[1].yz;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[0].yz * in_POSITION0.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[2].yz * in_POSITION0.zz + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_ObjectToWorld[3].yz * in_POSITION0.ww + u_xlat0.xy;
    u_xlat2.x = u_xlat0.y + (-_WorldSpaceCameraPos.z);
    u_xlat2.x = abs(u_xlat2.x) * abs(u_xlat2.x);
    u_xlat0.x = u_xlat2.x * u_xlat0.x;
    u_xlat2.xy = u_xlat2.xx * vec2(-0.00109999999, -0.000950000016);
    u_xlat0.x = u_xlat0.x * 3.39999997e-06 + u_xlat2.x;
    u_xlat2.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_BendIntensity);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_BendEnabled);
#endif
    u_xlat0.xyz = bool(u_xlatb6) ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
    u_xlat0.xyz = u_xlat0.xyz + in_POSITION0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "vulkan " {
"// disassembly error Unable to decode SMOL-V shader
"
}
}
}
}
Fallback "Hidden/InternalErrorShader"
CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
}
